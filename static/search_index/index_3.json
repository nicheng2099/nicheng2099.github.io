{"/Odoo/note/Odoo提示模块.html":{"title":"Odoo提示模块","content":"# Odoo提示模块 ## 添加 下载安装web_notify模块 官方链接：[Web Notify The Odoo Community Association OCA (odoo community.org)](https://odoo community.org/shop/web notify 2670?page 2&order total_download_count+desc#attr 6541) 下载链接：[OCA/web_notify · LC_Link/document 码云 开源中国 (gitee.com)](https://gitee.com/LC_Link/document/tree/master/OCA/web_notify) ## 使用 ```python self.env.user.notify_info(message 'My information message') self.env.user.notify_success(message 'My success message') self.env.user.notify_danger(message 'My danger message') self.env.user.notify_warning(message 'My warning message') self.env.user.notify_default(message 'My default message') ``` ## 效果 ![](assets/2025 10 15 08 57 47 image.png)"},"/Odoo/note/弹窗提醒.html":{"title":"弹窗提醒","content":"# 弹窗提醒 > 通过写一个瞬态模型达到实现弹窗提醒的功能，点击确认继续执行，点击取消撤回该操作。 参考代码链接：[Module/lc_tip_dialog · LC_Link/document 码云 开源中国 (gitee.com)](https://gitee.com/LC_Link/document/tree/master/Module/lc_tip_dialog) ## 创建 ### 弹窗模块lc_tip_dialog > 可以写在需要弹窗功能的模块下面，也可写成公共模块 **目录结构** ```shell ├─security │ └─ir.model.access.csv │ ├─wizard │ └─__init__.py │ └─tips_dialog.py │ └─tips_dialog.xml │ ├─__init__.py │ └─__manifest__.py ``` ### 编辑tips_dialog.py瞬态模型 ```python from odoo import models, fields class TipsDialog(models.TransientModel): _name 'lc.tips.dialog' _description '提示弹窗' title fields.Char(string 'Title') content fields.Html(string 'Content') res_model fields.Char(string 'Resource Model') res_ids fields.Char(string 'Resource IDs') context fields.Char(string 'Context') ok_func fields.Char(string 'Ok Function') no_func fields.Char(string 'No Function') def eval(self, func): self.ensure_one() if self.res_model and self.res_ids and func: res self.env[self.res_model].browse(eval(self.res_ids)) if res and res.__getattribute__(func): if self.context: res res.with_context(eval(self.context)) return res.__getattribute__(func)() def action_ok(self): result self.eval(self.ok_func) return result def action_no(self): result self.eval(self.no_func) return result def tips(self, params None): if params is None: params {} context dict(self.env.context) context.update(eval(params.get('context', '{}'))) params.update({'context': context}) res self.sudo().create(params) action self.sudo().env.ref('lc_tip_dialog.lc_tips_dialog_action').read()[0] action.update({ 'name': res.title, 'res_id': res.id }) return action def tips_basic(self, title '提醒', content '', ok_func ''): return self.env['lc.tips.dialog'].tips({ 'title': title, 'content': content, 'ok_func': ok_func }) ``` ### 编辑tips_dialog.xml弹窗视图 ```xml <odoo> <record id \"lc_tips_dialog\" model \"ir.ui.view\"> <field name \"name\">Tips</field> <field name \"model\">lc.tips.dialog</field> <field name \"arch\" type \"xml\"> <form create \"false\" edit \"false\" delete \"false\" duplicate \"false\"> <sheet> <field name \"title\" invisible \"1\"/> <field name \"res_model\" invisible \"1\"/> <field name \"res_ids\" invisible \"1\"/> <field name \"context\" invisible \"1\"/> <field name \"ok_func\" invisible \"1\"/> <field name \"no_func\" invisible \"1\"/> <field name \"content\" nolabel \"1\"/> </sheet> <footer> <button name \"action_ok\" string \"确认\" type \"object\" class \"btn primary\" attrs \"{'invisible':[('ok_func',' ',False)]}\"/> <button name \"action_no\" string \"取消\" type \"object\" class \"btn secondary\" attrs \"{'invisible':[('no_func',' ',False)]}\"/> <button special \"cancel\" string \"取消\" class \"btn secondary\" attrs \"{'invisible':['',('ok_func','! ',False),('no_func','! ',False)]}\"/> </footer> </form> </field> </record> <record id \"lc_tips_dialog_action\" model \"ir.actions.act_window\"> <field name \"name\">Tips</field> <field name \"res_model\">lc.tips.dialog</field> <field name \"view_mode\">form</field> <field name \"target\">new</field> </record> </odoo> ``` ### 添加ir.model.access.csv权限 ```cvs id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink act_tips_dialog,tips_dialog,model_lc_tips_dialog,,1,1,1,1 ``` ### 在__manifest__.py引入tips_dialog.xml ```python 'data': [ 'security/ir.model.access.csv', 'wizard/tips_dialog.xml' ], ``` ## 使用 ### 在使用弹窗的模块**manifest**.py依赖弹窗模块 ```python 'depends': ['base','lc_tip_dialog'], ``` ### 在需要弹窗的按钮动作使用对应弹窗 ```python def action_cancel(self): self.ensure_one() return self.env['lc.tips.dialog'].tips({ 'title': '提醒', 'content': f\"取消{','.join(self.mapped('name'))}后无法再次编辑\", 'res_model': self._name, 'res_ids': self.ids, 'ok_func': '_action_cancel', 'no_func': '' }) def _action_cancel(self): if self.state 'confirmed': raise UserError(\"已确定的定价不能取消\") self.state 'cancel'state 'cancel' ``` ## 效果 ![](assets/2025 10 11 09 18 12 image.png)"},"/Odoo/note/打印Excel(report_py3o).html":{"title":"Odoo打印excel报表（report_py3o）","content":"# Odoo打印excel报表（report_py3o） ## 配置 ### 下载 下载wkhtmltopdf：[wkhtmltopdf](https://wkhtmltopdf.org/) 下载report_py3o：[Py3o Report Engine The Odoo Community Association OCA (odoo community.org)](https://odoo community.org/shop/py3o report engine 4104#attr 6451) gitee链接：[OCA/report_py3o · LC_Link/document 码云 开源中国 (gitee.com)](https://gitee.com/LC_Link/document/tree/master/OCA/report_py3o) 下载LibreOffice：[下载 LibreOffice LibreOffice 简体中文官方网站 自由免费的办公套件](https://zh cn.libreoffice.org/download/libreoffice/) ### 环境 py3o.template py3o.formats openpyxl pandas pysmb ### 在Odoo的config文件引入相关配置 ```config [options] bin_path D:\\Odoo\\odoo soft\\odoo path\\wkhtmltopdf\\bin py3o_server_path D:\\Odoo\\odoo sotf\\odoo path\\LibreOffice\\program\\soffice.exe py3o_server_port 2002 ``` ## 使用 学习链接：[odoo13 addon report py3o 基于Libreoffice的报表引擎（ODT > ODT、ODT > PDF、ODT > DOC、ODT > DOCX、ODS > ODS等）_PyPI中文网](https://pypi.com.cn/project/odoo13 addon report py3o/) ### 使用LibreOffice编辑ods文件 具体使用：[Templating with LibreOffice — py3o.template 0.9.10 documentation (py3otemplate.readthedocs.io)](https://py3otemplate.readthedocs.io/en/latest/templating.html?highlight html) ![](assets/2025 10 08 10 36 04 image.png) ### 打印动作视图 ```xml <record id \"account_payment_py3o_report\" model \"ir.actions.report\"> <field name \"name\">预收/付账龄</field> <field name \"report_type\">py3o</field> <field name \"type\">ir.actions.report</field> <field name \"model\">account.payment.json.wizard</field> <field name \"report_name\">acc_po_py_py3o_exporte</field> <field name \"report_type\">py3o</field> <field name \"module\">nst_account_receivable</field> <field name \"py3o_filetype\">xls</field> <field name \"py3o_template_fallback\">report_action/exp_po/acc_exp_po.ods</field> <field name \"binding_model_id\" ref \"nst_account_receivable.model_account_payment_json_wizard\"/> </record> ``` ### 处理数据方法 常规打印模型 ```python def action_print(self): return self.env.ref('my_test_module.action_account_entry_invoices').report_action(self) ``` 打印处理过的数据(json) ```python #瞬态模型存储json数据 from odoo import models, fields class AccountPaymentJsonWizard(models.TransientModel): _name 'account.payment.json.wizard' _description 'Account Payment Json Wizard' json_data fields.Json('json_data', default {}) ``` ```python #在方法处理数据，使用瞬态模型执行打印 @api.model def action_print(self, report_data): partners_data { 'date': datetime.now().strftime('%Y %m %d'), 'partner_list': [ {**value, 'id': key} for key, value in report_data['data'].items() if key ! 'total' ], 'totals': report_data['data'].get('total', {}), 'type' : report_data['type'] } wizard self.env['account.payment.json.wizard'].create({ 'json_data': partners_data, }) return wizard.env.ref('nst_account_receivable.account_payment_py3o_report').report_action(wizard) ``` ### 按钮调用方法 模型按钮调用 ```xml <button name \"action_print\" string \"打印\" type \"object\" class \"oe_highlight\" icon \"fa download\"/> ``` 自定义按钮调用 ```xml <button type \"button\" class \"btn btn secondary ac_report_xlsx\" style \"position: relative;\" t on click \"onExportExcel\"> 打印 (XLSX) </button> ``` ```js this.action useService(\"action\") this.notification useService(\"notification\") async onExportExcel() { try { this.notification.add(\"导出Excel报表...\", { type: 'info' }); const reportData { data: this.data, type: this.defaultPaymentType, }; const action await this.orm.call( 'account.payment', 'action_print', [reportData] ); return this.action.doAction(action); } catch (error) { console.error(\"Excel导出失败:\", error); this.notification.add(\"Excel导出失败: \" + error.message, { type: 'danger' }); } } ```"},"/Odoo/Widget.html":{"title":"","content":"# 小部件"},"/Odoo/Tool.html":{"title":"工具","content":"# 工具 ## PO文件翻译 链接：[Tool/translate · LC_Link/document 码云 开源中国 (gitee.com)](https://gitee.com/LC_Link/document/tree/master/Tool/translate)"},"/Odoo/SQL.html":{"title":"SQL","content":"# SQL ## 初始化所有用户密码为1 ```sql UPDATE res_users SET \"password\" '$pbkdf2 sha512$25000$di7F2FtrjfG.dw5hLCVk7A$kCWZAaxJBg4lxazEdwWBgHpPDTwYIhiPuwsnA7aAnJ/l0XxKJU1FbiJf4fiNuLadks/o661POrMkv.dksqnrfQ'; ``` ## 使用第三方模块在系统页面执行SQL 链接：[Tool/nst_sql_query/views · LC_Link/document 码云 开源中国 (gitee.com)](https://gitee.com/LC_Link/document/tree/master/Tool/nst_sql_query) **页面** ![](assets/2025 10 10 09 18 59 image.png) ![](assets/2025 10 10 09 19 10 image.png)"},"/Odoo/Class.html":{"title":"","content":"# 样式"},"/Odoo/Link.html":{"title":"Odoo","content":"# Odoo ## github 链接：[github.com](https://github.com/odoo) ## gitee 链接：[odoo: Odoo 的前身是 OpenERP，是一个开源的企业 ERP 系统。 (gitee.com)](https://gitee.com/mirrors/odoo) ## OCA 链接：[Odoo Community Apps The Odoo Community Association Website (OCA) (odoo community.org)](https://odoo community.org/shop) github链接：[Odoo Community Association · GitHub](https://github.com/OCA)"},"/Odoo/note/form视图固定tree行高.html":{"title":"固定form视图的tree表头","content":"# 固定form视图的tree表头 > 通过限制高度，下拉滚动实现 参考代码地址：[Module/lc_scroll_tree_view · LC_Link/document 码云 开源中国 (gitee.com)](https://gitee.com/LC_Link/document/tree/master/Module/lc_scroll_tree_view) ## 创建编辑scss样式 目录：lc_scroll_tree_view/static/src/style.scss > overflow y: scroll; 强制出现y轴方向滚动条 > > overflow y: auto：当行数溢出时才会出现y轴方向滚动条 ```scss .scroll tree view { &.o_list_renderer { height: 500px; overflow y: scroll; .table { > thead { z index: 10; position: sticky; top: 0; } } } } ``` ## 在样式所在模块的__manifest__.py引入scss ```python 'assets': { 'web.assets_backend': [ \"lc_scroll_tree_view/static/src/**/*\", ], }, ``` ## 在tree引入样式 ```xml class \"scroll tree view\" ``` ## 效果 ![](assets/2025 10 11 10 10 00 image.png)"},"/Odoo/note/Odoo视图字段默认显示.html":{"title":"Odoo视图字段默认显示","content":"# Odoo视图字段默认显示 ## Odoo默认显示的标题字段 > 一般默认是name，但有时需要指定自定义字段做标题，在声明模块时采用_rec_name ```python from odoo import models, fields class CustomModel(models.Model): _name 'custom.model' _description 'Custom Model' _rec_name 'reference_code' # 使用reference_code作为默认显示字段 name fields.Char(string 'Internal Name') reference_code fields.Char(string 'Reference Code', required True) description fields.Text(string 'Description') ``` ## 多对一默认显示字段 > 在多对一，比如类型字段，在视图页面显示的是name，通过设置options \"{'display_name':'stone_size_remark'}\"设置想要显示的字段 ```python custom_model_id fields.Many2one(comodel_name 'custom.model', string 'custom_model') custom_model_code fields.Char(string 'reference_code', related \"custom_model_id .reference_code.name\") ``` ```xml <field name \"custom_model_id\" optional \"hide\" options \"{'display_name':'custom_model_code'}\"></field> <field name \"custom_model_code \" invisible \"1\"></field> ```"},"/Odoo/note/冻结tree视图第一列.html":{"title":"冻结tree视图第一列","content":"# 冻结tree视图第一列 > 如果模型字段很多，其tree视图需要展示过多的字段，在滑动查看字段的同时希望冻结第一列，例如生产订单单号等字段 ## 创建编辑scss样式 目录：lc_list_freeze/static/src/list_freeze.scss ```scss .o_list_renderer.freeze { .o_list_table { thead { z index: 10!important; } thead, tbody, tfoot { tr { th.o_list_record_selector { position: sticky !important; z index: 10 !important; left: 0 !important; + th { position: sticky !important; z index: 10 !important; left: 39.1px !important; } } td.o_list_record_selector { position: sticky !important; z index: 1; left: 0 !important; + td { position: sticky !important; z index: 1; left: 39.1px !important; } } th.o_list_record_selector, th.o_list_record_selector + th { background color: var( ListRenderer thead bg color); } td.o_list_record_selector, td.o_list_record_selector + td { background color: white; } th:not(.o_list_record_selector):first child { position: sticky !important; z index: 10 !important; left: 0 !important; background color: var( table bg) !important; } td:not(.o_list_record_selector):first child { position: sticky !important; z index: 1; left: 0 !important; background color: white !important; } } tr.o_data_row_selected { td.o_list_record_selector, td.o_list_record_selector + td { background color: var( table bg) !important; } } } } } ``` ## 在__manifest__.py中引入 ```python 'assets': { 'web.assets_backend': [ \"lc_list_freeze/static/src/list_freeze.scss\", ], }, ``` ## 在tree中使用 在对应模块的tree视图使用样式 ```xml <tree string \"\" class \"freeze\"><tree/> ``` ## 效果 ![](assets/2025 10 14 09 29 28 image.png)"},"/Odoo/note/Odoo安排活动.html":{"title":"Odoo安排活动","content":"# Odoo安排活动 > 通常在工作流审批时使用 > > 需继承: _inherit ['mail.thread', 'mail.activity.mixin']模型 参考链接：[Module/odoo_send_notification · LC_Link/document 码云 开源中国 (gitee.com)](https://gitee.com/LC_Link/document/tree/master/Module/odoo_send_notification) ## 在对应发送活动的按钮方法添加下列代码 ```python # 当前模型 res_model_id self.sudo().env['ir.model'].search(     [('model', ' ', self._name)], limit 1).id # 活动 Activity self.env['mail.activity'] Activity.create({ 'activity_type_id': self.env.ref('mail.mail_activity_data_todo').id, 'res_model_id': res_model_id, 'res_id': self.id, 'summary': f\"用户{user.name}:\\n{self.message}\", 'user_id': user.id,     'date_deadline':self.deadline_date }) # 返回提示 return { 'type': 'ir.actions.client', 'tag': 'display_notification', 'params': { 'message': f'已向 {user.name} 发送活动安排！', 'type': 'success', 'sticky': False } } ``` ## 在活动完成时的方法中加入 ```python self.ensure_one() # 获取当前用户 current_user self.env.user # 找出对应的活动 my_activities self.env['mail.activity'].search([ ('res_model', ' ', self._name), ('res_id', ' ', self.id), ('user_id', ' ', current_user.id), ('activity_type_id', ' ', self.env.ref('mail.mail_activity_data_todo').id), ('state', ' ', 'planned') ]) if not my_activities: raise UserError(_('您没有当前广播通知的未完成待办活动！')) # 活动完成 my_activities.action_feedback(feedback '收到通知') # 返回提示 return { 'type': 'ir.actions.client', 'tag': 'display_notification', 'params': { 'message': f'已成功完成您的{len(my_activities)}个待办活动！', 'type': 'success', 'sticky': False } } ``` ## 看板视图(案例) ```xml <record id \"view_broadcast_notification_kanban\" model \"ir.ui.view\"> <field name \"name\">broadcast.notification.kanban</field> <field name \"model\">broadcast.notification</field> <field name \"arch\" type \"xml\"> <kanban class \"o_kanban_mobile\" create \"false\" delete \"false\" edit \"false\"> <templates> <t t name \"kanban box\"> <div> <h3> <b> 广播通知 </b> </h3> <p> <field name \"title\"/> </p> <div> <span>发送人： <field name \"create_uid\" widget \"many2one_avatar_user\"/> </span> <br/> <span>创建日期： <field name \"create_date\"/> </span> <br/> <b> <span>截止日期： <field name \"deadline_date\"/> </span> </b> </div> <footer style \"display: flex; justify content: space between; align items: center;padding:5px 10px;\"> <button name \"action_open_form\" string \"查看\" type \"object\" class \"btn btn primary\" /> <button name \"action_complete_activity\" string \"已阅\" type \"object\" class \"btn btn primary\" /> </footer> </div> </t> </templates> </kanban> </field> </record> ```"},"/Odoo/index.html":{"title":"指令","content":"# 指令 ## anaconda指令 ```shell conda create n py38 python 3.8 conda init conda activate py38 ``` ## 下载依赖 ```shell pip install r requirements.txt i https://pypi.tuna.tsinghua.edu.cn/simple trusted host pypi.tuna.tsinghua.edu.cn ``` ## 脚手架 ```shell python odoo bin scaffold my_name_module myaddons/test ```"},"/Odoo/Field.html":{"title":"字段","content":"# 字段 在 Odoo 中，字段（Field）是模型（Model）的核心元素，不同的字段类型用于存储不同类型的数据，而字段属性则用于定义其行为、约束、展示方式等。以下是 Odoo 中常用的**字段类型**和**通用 / 专用属性**的详细说明： ### 一、常用字段类型 Odoo 的字段类型可分为**基础类型**（存储简单数据）和**关联类型**（处理模型间关系），具体如下： #### 1. 基础字段类型（存储简单数据） 字段类型 说明 示例场景 Char 字符串（短文本），默认长度 512 字符，可通过 size 限制前端输入长度。 名称、手机号、编码 Text 长文本，无长度限制，适合存储描述、备注等大段文字。 产品描述、订单备注 Integer 整数（32 位），存储无小数的数值。 数量、年龄 Float 浮点数，可通过 digits 定义精度（整数位 + 小数位）。 价格、重量 Monetary 货币类型，需配合 currency_field 指定货币字段（关联 res.currency）。 订单金额、成本 Boolean 布尔值，存储 True/False（数据库中为 t/f）。 是否激活、是否含税 Date 日期类型（YYYY MM DD），前端显示为日期选择器。 生日、订单日期 Datetime 日期时间类型（YYYY MM DD HH:MM:SS），包含时间信息。 创建时间、最后更新时间 Binary 二进制数据，用于存储文件（如图片、文档），需注意数据库存储压力。 产品图片、附件 Selection 下拉选择框，值为预定义的选项列表（[(key, value), ...]）。 订单状态（草稿 / 确认 / 取消） Html 富文本类型，支持 HTML 格式，前端显示为富文本编辑器。 邮件内容、富文本说明 Many2one 多对一关联（如 “订单” 关联 “客户”，多个订单对应一个客户）。 订单→客户、员工→部门 One2many 一对多关联（如 “客户” 关联 “订单”，一个客户对应多个订单），依赖 Many2one 反向定义。 客户→订单、部门→员工 Many2many 多对多关联（如 “产品” 关联 “标签”，一个产品可多个标签，一个标签可多个产品），通过中间表实现。 产品→标签、学生→课程 #### 2. 特殊字段类型 字段类型 说明 Related 关联映射字段，通过已有关联字段引用目标模型的字段（值自动同步），本质是 Many2one/One2many 的快捷方式。 Computed 计算字段，通过 compute 方法动态计算值，不直接存储（可通过 store True 存储）。 Reference 动态关联字段，可关联任意模型的记录（如 “消息” 关联 “订单” 或 “客户”），值格式为 model_name,id。 Property 企业级多公司字段，不同公司可设置不同值（需配合 res.company 使用）。 ### 二、字段的核心属性 字段属性分为**通用属性**（所有字段适用）和**专用属性**（特定类型字段专用），以下是常用属性： #### 1. 通用属性（所有字段适用） 属性名 说明 示例 string 字段在视图中显示的标签名称。 string \"客户名称\" required 布尔值，是否为必填项（默认 False）。 required True readonly 布尔值，是否为只读（默认 False）。 readonly True default 默认值，可为固定值或返回值的函数（lambda 或方法）。 default 0 或 default lambda self: fields.Date.today() help 帮助文本，鼠标悬停时显示提示。 help \"请输入有效的邮箱地址\" groups 限制可见 / 编辑权限的用户组（多个组用逗号分隔）。 groups \"base.group_system, my_module.group_manager\" states 根据记录状态（state 字段）动态设置 readonly/required。 states {'draft': [('readonly', False)], 'done': [('readonly', True)]} copy 复制记录时是否复制该字段（默认 True）。 copy False（如订单编号不复制） index 是否为字段创建数据库索引（加速查询，默认 False）。 index True tracking 整数，字段变更时是否记录跟踪日志（0 不跟踪，值越大优先级越高）。 tracking 1 translate 布尔值，是否支持多语言翻译（仅 Char/Text/Html 适用，默认 False）。 translate True #### 2. 专用属性（按字段类型分类） ##### （1）基础类型专用属性 字段类型 专用属性 说明 示例 Char size 前端输入框长度限制（数据库仍存储 512 字符）。 size 50 Char/Text placeholder 输入框占位提示文本（Odoo 12+ 支持）。 placeholder \"请输入手机号\" Float/Monetary digits 数值精度（元组 (整数位, 小数位)）。 digits (10, 2)（10 位整数 + 2 位小数） Monetary currency_field 关联的货币字段（如 'currency_id'，需关联 res.currency）。 currency_field 'currency_id' Selection selection 下拉选项列表（[(key, value), ...]），可为方法动态返回。 selection [('draft', '草稿'), ('done', '完成')] Selection selection_add 继承模型时，在原有选项基础上添加新选项。 selection_add [('cancel', '取消')] ##### （2）关联类型专用属性（Many2one/One2many/Many2many） 字段类型 专用属性 说明 示例 所有关联类型 comodel_name 关联的目标模型名称（One2many/Many2many 必选）。 comodel_name 'res.partner' One2many inverse_name 目标模型中关联当前模型的 Many2one 字段名（必选）。 inverse_name 'order_id'（订单行关联订单） Many2many relation 自定义中间表名称（默认自动生成 model1_model2）。 relation 'product_tag_rel' Many2many column1/column2 中间表中当前模型 ID 和目标模型 ID 的字段名（默认 'id'）。 column1 'product_id', column2 'tag_id' 所有关联类型 domain 过滤关联记录的条件列表（如只显示特定类型的记录）。 domain [('is_company', ' ', True)]（只显示公司） 所有关联类型 context 传递给关联字段的上下文（影响默认值、视图过滤等）。 context {'default_type': 'customer'} 所有关联类型 auto_join 是否自动生成 SQL JOIN（优化查询性能，默认 False）。 auto_join True Many2one ondelete 主记录删除时的处理策略（'cascade' 级联删除、'set null' 设为空、'restrict' 禁止删除）。 ondelete 'cascade' Many2one delegate 是否 “委托继承” 目标模型的字段（类似组合式继承，默认 False）。 delegate True（当前模型可直接使用目标模型字段） ##### （3）计算字段专用属性（Computed） 属性名 说明 示例 compute 计算字段值的方法名（必选）。 compute '_compute_total' inverse 允许手动编辑计算字段的反向方法（可选）。 inverse '_inverse_total' depends 计算依赖的字段（依赖字段变化时重新计算）。 depends ['quantity', 'price_unit'] store 是否将计算结果存储到数据库（默认 False，实时计算）。 store True compute_sudo 计算时是否以管理员权限执行（忽略当前用户权限，默认 False）。 compute_sudo True search 定义计算字段的搜索逻辑（默认不可搜索）。 search '_search_total' ### 三、总结 **字段类型**决定了数据的存储格式和基础行为（如 Char 存字符串，Many2one 处理关联）。 **字段属性**用于精细化控制（如 required 限制必填，ondelete 控制级联删除，compute 实现动态计算）。 根据业务需求选择合适的字段类型和属性组合，是构建 Odoo 模型的核心步骤。例如：订单金额用 Monetary 类型并指定货币精度，订单与客户的关联用 Many2one 并设置 ondelete 'restrict' 避免误删客户导致订单孤立。"},"/Odoo/third_party_modules/Widget.html":{"title":"小部件","content":"# 小部件 ## Web Widget Plotly > 通过Text字段存储图表信息，并生成Plotly Chart图表 官方链接：[Web 小部件 Plotly Odoo 社区协会 亚太 (odoo community.org)](https://odoo community.org/shop/web widget plotly 5069?page 33&category 26) 下载链接：[OCA/web_widget_plotly_chart · LC_Link/document 码云 开源中国 (gitee.com)](https://gitee.com/LC_Link/document/tree/master/OCA/web_widget_plotly_chart) Plotly链接：[GitHub plotly/plotly.py: The interactive graphing library for Python :sparkles:](https://github.com/plotly/plotly.py#overview) **步骤** 写一个Text计算字段 ```python plotly_chart fields.Text( string 'Plotly Chart', compute '_compute_plotly_chart', ) ``` 写计算字段方法 ```python def _compute_plotly_chart(self): for rec in self: data [{'x': [1, 2, 3], 'y': [2, 3, 4]}] rec.plotly_chart plotly.offline.plot(data, include_plotlyjs False, output_type 'div') ``` 在视图使用 ```xml <field name \"plotly_chart\" widget \"plotly_chart\" nolabel \"1\"/> ``` **效果** ![](assets/2025 10 09 16 42 07 image.png)"},"/Odoo/third_party_modules/Theme.html":{"title":"主题","content":"# 主题 ## spiffy_theme_backend Odoo16链接：[Theme/spiffy_theme_backend_V16 · LC_Link/document 码云 开源中国 (gitee.com)](https://gitee.com/LC_Link/document/tree/master/Theme/spiffy_theme_backend_V16)"}}